@SpringBootApplication: 相当于@Configuration,@EnableAutoConfiguration,@ComponentScan, 用于简化开发,请参考Kneel纯Spring怎么定义的.
@EnableJpaRepositories: JPA需要制定repositories库，也就是entity实体库.
@SpringBootTest       : 使用Spring boot基础测试类,自动加载Spring配置(application.properties).
@ContextConfiguration : 加载Spring配置信息.


Application.properties.

spring.datasource.driver-class-name: 数据库驱动(org.h2.Driver)
spring.datasource.url: 数据库URL(jdbc:h2:tcp://localhost:8043/~/h2db).
spring.datasource.username: 数据库用户名(admin).
spring.datasource.password: 数据库密码(). 

spring.jpa.show-sql: true/false 控制是否 显示sql语句
spring.jpa.hibernate.naming.strategy: JPA的策略, 可以自动转化为骆驼峰结构(org.hibernate.cfg.ImprovedNamingStrategy).
spring.jpa.properties.hibernate.dialect: 制定JPA使用的方言，这里是h2(org.hibernate.dialect.H2Dialect).
spring.jpa.hibernate.ddl-auto:create-drop

server.port: Web端口(9080).
server.contextPath: Web跟路径(/boot).

******************************************************************************************************
                                     JPA
******************************************************************************************************

JPA Annotation:
@Table annotation is used to provide the details of the table that this entity will be mapped to
@Id annotation is used to define the primary key.
@GeneratedValue annotation is used to define the primary key generation strategy. In the above case, we have declared the primary key to be an Auto Increment field.
@NotBlank annotation is used to validate that the annotated field is not null or empty.
@Column annotation is used to define the properties of the column that will be mapped to the annotated field. You can define several properties like name, length, nullable, updateable etc.
@Temporal annotation is used with java.util.Date and java.util.Calendar classes. It converts the date and time values from Java Object to compatible database type and vice versa.
@JsonIgnoreProperties annotation is a Jackson annotation. Spring Boot uses Jackson for Serializing and Deserializing Java objects to and from JSON.

${domain}Repository: 第一步定义Repository接口，可以继承下面的基类.
1. CRUD Operator for base Repository CrudRepository<T,ID extends Serializable>,基本满足日常需求.
   1.1: <S extends T> S save(S entity);
   1.2: <S extends T> Iterable<S> save(Iterable<S> entities);
   1.3: T findOne(ID id);
   1.4: boolean exists(ID id);
   1.5: Iterable<T> findAll();
   1.6: Iterable<T> findAll(Iterable<ID> ids);
   1.7: long count();
   1.8: void delete(ID id);
   1.9: void delete(T entity);
   2.0: void delete(Iterable<? extends T> entities);
   2.1: void deleteAll();
2. PAGE Operator for base repository PagingAndSortingRepository<T,ID extends Serializable>,不仅拥有上面的CRUD功能，还能排序分页.
   2.1: Iterable<T> findAll(Sort sort); 排序
   2.2: Page<T> findAll(Pageable pageable); 分页
       PagingAndSortingRepository<User, Long> repository = // … get access to a bean
       Page<User> users = repository.findAll(new PageRequest(1, 20));
3. No Operator for base repository Repository<T, ID extends Serializable>,没有基本的方法，如果不用增删改，仅仅简单的查询，可以直接用这个简单的.

查询自动构建机制: 这个机制会去掉前缀,使用方法名来自动构建SQL.
  1. find...By.../findBy...
  2. read...By.../readBy...
  3. query...By.../queryBy...
  4. count...By.../countBy...
  5. get...By.../getBy...

JPA的自动构建功能.[AND , OR, Between, LessThan, GreaterThan, Like , Distinct, IgnoreCase/AllIgnoreCase, OrderBy...ASC/DESC] 
1. List<Person> findByEmailAddressAndLastname(EmailAddress emailAddress, String lastname);
2. List<Person> findDistinctPeopleByLastnameOrFirstname(String lastname, String firstname);
3. List<Person> findByLastnameIgnoreCase(String lastname);
4. List<Person> findByLastnameAndFirstnameAllIgnoreCase(String lastname, String firstname);
5. List<Person> findByLastnameOrderByFirstnameAsc(String lastname);
6. List<Person> findByLastnameOrderByFirstnameDesc(String lastname);

7. Page<User> findByLastname(String lastname, Pageable pageable);
8. List<User> findByLastname(String lastname, Sort sort);
9. List<User> findByLastname(String lastname, Pageable pageable);
@Async
10. Future<User> findByFirstname(String firstname); 支持异步查询
@Async
11. CompletableFuture<User> findOneByFirstname(String firstname);
@Async
12. ListenableFuture<User> findOneByLastname(String lastname); 

JPA客户自定义构建.
1. 定义客户接口 UserRepository(customerRepository)
2. 定义客户实现 UserRepositoryImpl ("Impl"默认的实现扫描,实现customer的方法).  

JPA客户自定义SQL.
1. entity: 
@NamedQueries({
	@NamedQuery(name = "User.findByProperty",
		query = "SELECT p FROM PlmProperties p WHERE p.property = ? and p.env='DEV1'"),
	@NamedQuery(name = "User.findByPropcategory",
	    query = "SELECT p FROM PlmProperties p WHERE p.propcategory = :propcategory and p.env='DEV1'")
})

2. repository

@Query(value = "SELECT p FROM PlmPropertiesEntity p WHERE p.property = ? and p.env='DEV1'", nativeQuery = false)
PlmPropertiesEntity findByProperty(String property);
  
******************************************************************************************************
                                     Security
******************************************************************************************************  
SpringSecurityConfig 继承WebSecurityConfigurerAdapter,可以重写验证方法.
1. CRSF: 跨站点攻击，添加token可以把未授权的请求拦截在外面.
我们可以生成唯一的token到页面，然后页面把这个token传递回来，来确保页面不会被跨站点攻击.

BAT
cd C:\eclipse\workspace\spring-boot\kneel-boot
set JAVA_HOME=C:\Program Files (x86)\Java\jdk1.7.0_67
-Dspring.profiles.active=production 
mvn spring-boot:run -Dmaven.test.skip=true